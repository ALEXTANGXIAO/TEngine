// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/TEngineProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TEngineProto {

  /// <summary>Holder for reflection information generated from Proto/TEngineProto.proto</summary>
  public static partial class TEngineProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/TEngineProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TEngineProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90by9URW5naW5lUHJvdG8ucHJvdG8SDFRFbmdpbmVQcm90byLAAgoI",
            "TWFpblBhY2sSLgoLcmVxdWVzdGNvZGUYASABKA4yGS5URW5naW5lUHJvdG8u",
            "UmVxdWVzdENvZGUSLAoKYWN0aW9uY29kZRgCIAEoDjIYLlRFbmdpbmVQcm90",
            "by5BY3Rpb25Db2RlEiwKCnJldHVybmNvZGUYAyABKA4yGC5URW5naW5lUHJv",
            "dG8uUmV0dXJuQ29kZRIqCglsb2dpblBhY2sYBCABKAsyFy5URW5naW5lUHJv",
            "dG8uTG9naW5QYWNrEg4KBmV4dHN0chgFIAEoCRIoCghyb29tcGFjaxgGIAMo",
            "CzIWLlRFbmdpbmVQcm90by5Sb29tUGFjaxIsCgpwbGF5ZXJwYWNrGAcgASgL",
            "MhguVEVuZ2luZVByb3RvLlBsYXllclBhY2sSFAoMSGVhdEVjaG9UaW1lGAgg",
            "ASgCIi8KCUxvZ2luUGFjaxIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29y",
            "ZBgCIAEoCSLxAQoIUm9vbVBhY2sSEAoIcm9vbW5hbWUYASABKAkSDgoGbWF4",
            "bnVtGAIgASgFEg4KBmN1cm51bRgDIAEoBRINCgVzdGF0ZRgEIAEoBRIuCgln",
            "YW1lc3RhdGUYBSABKAsyGy5URW5naW5lUHJvdG8uR2FtZVN0YXRlUGFjaxIO",
            "CgZyb29tSUQYBiABKAUSDwoHdmlzYWJsZRgJIAEoBRITCgt1c2VQYXNzd29y",
            "ZBgKIAEoBRIQCghwYXNzd29yZBgLIAEoCRIsCgpwbGF5ZXJwYWNrGAwgAygL",
            "MhguVEVuZ2luZVByb3RvLlBsYXllclBhY2sieQoKUGxheWVyUGFjaxISCgpw",
            "bGF5ZXJuYW1lGAEgASgJEhAKCHBsYXllcklEGAIgASgJEgoKAmhwGAMgASgF",
            "EiYKB3Bvc1BhY2sYBCABKAsyFS5URW5naW5lUHJvdG8uUG9zUGFjaxIRCglw",
            "bGF5ZXJKb2IYBSABKAUiRwoNR2FtZVN0YXRlUGFjaxImCgVzdGF0ZRgBIAEo",
            "DjIXLlRFbmdpbmVQcm90by5HQU1FU1RBVEUSDgoGQm9zc0lkGAIgASgFIlgK",
            "CENhcmREYXRhEg8KB2NhcmRJbnQYASABKAUSEQoJY2FyZFZhbHVlGAIgASgF",
            "EigKCGNhcmRUeXBlGAMgASgOMhYuVEVuZ2luZVByb3RvLkNhcmRUeXBlIq4B",
            "CgdQb3NQYWNrEgwKBFBvc1gYASABKAISDAoEUG9zWRgCIAEoAhIMCgRQb3Na",
            "GAMgASgCEg0KBVJvdGFYGAQgASgCEg0KBVJvdGFZGAUgASgCEg0KBVJvdGFa",
            "GAYgASgCEhEKCUFuaW1hdGlvbhgIIAEoBRIMCgREaXJyGAkgASgFEg0KBU1v",
            "dmVYGAogASgCEg0KBU1vdmVZGAsgASgCEg0KBU1vdmVaGAwgASgCKkcKC1Jl",
            "cXVlc3RDb2RlEg8KC1JlcXVlc3ROb25lEAASCQoFSGVhcnQQARIICgRVc2Vy",
            "EAISCAoEUm9vbRADEggKBEdhbWUQBCrHAQoKQWN0aW9uQ29kZRIOCgpBY3Rp",
            "b25Ob25lEAASDQoJSGVhcnRCZWF0EAESDQoIUmVnaXN0ZXIQ6AcSCgoFTG9n",
            "aW4Q6QcSDwoKQ3JlYXRlUm9vbRDqBxINCghGaW5kUm9vbRDrBxIPCgpHZXRQ",
            "bGF5ZXJzEOwHEg0KCEpvaW5Sb29tEO0HEg0KCEV4aXRSb29tEO4HEg4KCVN0",
            "YXJ0R2FtZRDvBxIVChBTdGFydEdhbWVGcm9tU3ZyEPAHEgkKBENoYXQQ0A8q",
            "QwoKUmV0dXJuQ29kZRIOCgpSZXR1cm5Ob25lEAASCwoHU3VjY2VzcxABEggK",
            "BEZhaWwQAhIOCgpNc2dUaW1lT3V0EAMqOwoJR0FNRVNUQVRFEgoKBlNUQVRF",
            "MRAAEgoKBlNUQVRFMhABEgoKBlNUQVRFMxACEgoKBlNUQVRFNBADKkwKCENh",
            "cmRUeXBlEggKBE5PTkUQABIICgRDTFVCEAESCwoHRElBTU9ORBACEgkKBUhF",
            "QVJUEAMSCQoFU1BBREUQBBIJCgVKT0tFUhAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TEngineProto.RequestCode), typeof(global::TEngineProto.ActionCode), typeof(global::TEngineProto.ReturnCode), typeof(global::TEngineProto.GAMESTATE), typeof(global::TEngineProto.CardType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.MainPack), global::TEngineProto.MainPack.Parser, new[]{ "Requestcode", "Actioncode", "Returncode", "LoginPack", "Extstr", "Roompack", "Playerpack", "HeatEchoTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.LoginPack), global::TEngineProto.LoginPack.Parser, new[]{ "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.RoomPack), global::TEngineProto.RoomPack.Parser, new[]{ "Roomname", "Maxnum", "Curnum", "State", "Gamestate", "RoomID", "Visable", "UsePassword", "Password", "Playerpack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.PlayerPack), global::TEngineProto.PlayerPack.Parser, new[]{ "Playername", "PlayerID", "Hp", "PosPack", "PlayerJob" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.GameStatePack), global::TEngineProto.GameStatePack.Parser, new[]{ "State", "BossId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.CardData), global::TEngineProto.CardData.Parser, new[]{ "CardInt", "CardValue", "CardType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TEngineProto.PosPack), global::TEngineProto.PosPack.Parser, new[]{ "PosX", "PosY", "PosZ", "RotaX", "RotaY", "RotaZ", "Animation", "Dirr", "MoveX", "MoveY", "MoveZ" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RequestCode {
    [pbr::OriginalName("RequestNone")] RequestNone = 0,
    /// <summary>
    ///心跳
    /// </summary>
    [pbr::OriginalName("Heart")] Heart = 1,
    /// <summary>
    ///用户
    /// </summary>
    [pbr::OriginalName("User")] User = 2,
    /// <summary>
    ///房间
    /// </summary>
    [pbr::OriginalName("Room")] Room = 3,
    /// <summary>
    ///游戏
    /// </summary>
    [pbr::OriginalName("Game")] Game = 4,
  }

  public enum ActionCode {
    [pbr::OriginalName("ActionNone")] ActionNone = 0,
    /// <summary>
    ///心跳
    /// </summary>
    [pbr::OriginalName("HeartBeat")] HeartBeat = 1,
    /// <summary>
    ///注册
    /// </summary>
    [pbr::OriginalName("Register")] Register = 1000,
    /// <summary>
    ///登录
    /// </summary>
    [pbr::OriginalName("Login")] Login = 1001,
    /// <summary>
    ///创建房间
    /// </summary>
    [pbr::OriginalName("CreateRoom")] CreateRoom = 1002,
    /// <summary>
    ///查找房间
    /// </summary>
    [pbr::OriginalName("FindRoom")] FindRoom = 1003,
    /// <summary>
    ///获取玩家列表
    /// </summary>
    [pbr::OriginalName("GetPlayers")] GetPlayers = 1004,
    /// <summary>
    ///加入房间
    /// </summary>
    [pbr::OriginalName("JoinRoom")] JoinRoom = 1005,
    /// <summary>
    ///离开房间
    /// </summary>
    [pbr::OriginalName("ExitRoom")] ExitRoom = 1006,
    /// <summary>
    ///开始游戏
    /// </summary>
    [pbr::OriginalName("StartGame")] StartGame = 1007,
    /// <summary>
    ///服务端发送来的开始游戏指令
    /// </summary>
    [pbr::OriginalName("StartGameFromSvr")] StartGameFromSvr = 1008,
    /// <summary>
    ///聊天
    /// </summary>
    [pbr::OriginalName("Chat")] Chat = 2000,
  }

  public enum ReturnCode {
    [pbr::OriginalName("ReturnNone")] ReturnNone = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Success")] Success = 1,
    /// <summary>
    ///失败
    /// </summary>
    [pbr::OriginalName("Fail")] Fail = 2,
    /// <summary>
    ///消息超时
    /// </summary>
    [pbr::OriginalName("MsgTimeOut")] MsgTimeOut = 3,
  }

  public enum GAMESTATE {
    [pbr::OriginalName("STATE1")] State1 = 0,
    [pbr::OriginalName("STATE2")] State2 = 1,
    [pbr::OriginalName("STATE3")] State3 = 2,
    [pbr::OriginalName("STATE4")] State4 = 3,
  }

  public enum CardType {
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    ///草花
    /// </summary>
    [pbr::OriginalName("CLUB")] Club = 1,
    /// <summary>
    ///方块
    /// </summary>
    [pbr::OriginalName("DIAMOND")] Diamond = 2,
    /// <summary>
    ///红心
    /// </summary>
    [pbr::OriginalName("HEART")] Heart = 3,
    /// <summary>
    ///黑桃
    /// </summary>
    [pbr::OriginalName("SPADE")] Spade = 4,
    /// <summary>
    /// </summary>
    [pbr::OriginalName("JOKER")] Joker = 5,
  }

  #endregion

  #region Messages
  public sealed partial class MainPack : pb::IMessage<MainPack> {
    private static readonly pb::MessageParser<MainPack> _parser = new pb::MessageParser<MainPack>(() => new MainPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack(MainPack other) : this() {
      requestcode_ = other.requestcode_;
      actioncode_ = other.actioncode_;
      returncode_ = other.returncode_;
      loginPack_ = other.loginPack_ != null ? other.loginPack_.Clone() : null;
      extstr_ = other.extstr_;
      roompack_ = other.roompack_.Clone();
      playerpack_ = other.playerpack_ != null ? other.playerpack_.Clone() : null;
      heatEchoTime_ = other.heatEchoTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainPack Clone() {
      return new MainPack(this);
    }

    /// <summary>Field number for the "requestcode" field.</summary>
    public const int RequestcodeFieldNumber = 1;
    private global::TEngineProto.RequestCode requestcode_ = global::TEngineProto.RequestCode.RequestNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.RequestCode Requestcode {
      get { return requestcode_; }
      set {
        requestcode_ = value;
      }
    }

    /// <summary>Field number for the "actioncode" field.</summary>
    public const int ActioncodeFieldNumber = 2;
    private global::TEngineProto.ActionCode actioncode_ = global::TEngineProto.ActionCode.ActionNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.ActionCode Actioncode {
      get { return actioncode_; }
      set {
        actioncode_ = value;
      }
    }

    /// <summary>Field number for the "returncode" field.</summary>
    public const int ReturncodeFieldNumber = 3;
    private global::TEngineProto.ReturnCode returncode_ = global::TEngineProto.ReturnCode.ReturnNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.ReturnCode Returncode {
      get { return returncode_; }
      set {
        returncode_ = value;
      }
    }

    /// <summary>Field number for the "loginPack" field.</summary>
    public const int LoginPackFieldNumber = 4;
    private global::TEngineProto.LoginPack loginPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.LoginPack LoginPack {
      get { return loginPack_; }
      set {
        loginPack_ = value;
      }
    }

    /// <summary>Field number for the "extstr" field.</summary>
    public const int ExtstrFieldNumber = 5;
    private string extstr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extstr {
      get { return extstr_; }
      set {
        extstr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roompack" field.</summary>
    public const int RoompackFieldNumber = 6;
    private static readonly pb::FieldCodec<global::TEngineProto.RoomPack> _repeated_roompack_codec
        = pb::FieldCodec.ForMessage(50, global::TEngineProto.RoomPack.Parser);
    private readonly pbc::RepeatedField<global::TEngineProto.RoomPack> roompack_ = new pbc::RepeatedField<global::TEngineProto.RoomPack>();
    /// <summary>
    ///房间包，repeated加上为list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TEngineProto.RoomPack> Roompack {
      get { return roompack_; }
    }

    /// <summary>Field number for the "playerpack" field.</summary>
    public const int PlayerpackFieldNumber = 7;
    private global::TEngineProto.PlayerPack playerpack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.PlayerPack Playerpack {
      get { return playerpack_; }
      set {
        playerpack_ = value;
      }
    }

    /// <summary>Field number for the "HeatEchoTime" field.</summary>
    public const int HeatEchoTimeFieldNumber = 8;
    private float heatEchoTime_;
    /// <summary>
    ///心跳包回包时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeatEchoTime {
      get { return heatEchoTime_; }
      set {
        heatEchoTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requestcode != other.Requestcode) return false;
      if (Actioncode != other.Actioncode) return false;
      if (Returncode != other.Returncode) return false;
      if (!object.Equals(LoginPack, other.LoginPack)) return false;
      if (Extstr != other.Extstr) return false;
      if(!roompack_.Equals(other.roompack_)) return false;
      if (!object.Equals(Playerpack, other.Playerpack)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeatEchoTime, other.HeatEchoTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requestcode != global::TEngineProto.RequestCode.RequestNone) hash ^= Requestcode.GetHashCode();
      if (Actioncode != global::TEngineProto.ActionCode.ActionNone) hash ^= Actioncode.GetHashCode();
      if (Returncode != global::TEngineProto.ReturnCode.ReturnNone) hash ^= Returncode.GetHashCode();
      if (loginPack_ != null) hash ^= LoginPack.GetHashCode();
      if (Extstr.Length != 0) hash ^= Extstr.GetHashCode();
      hash ^= roompack_.GetHashCode();
      if (playerpack_ != null) hash ^= Playerpack.GetHashCode();
      if (HeatEchoTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeatEchoTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requestcode != global::TEngineProto.RequestCode.RequestNone) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Requestcode);
      }
      if (Actioncode != global::TEngineProto.ActionCode.ActionNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Actioncode);
      }
      if (Returncode != global::TEngineProto.ReturnCode.ReturnNone) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Returncode);
      }
      if (loginPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LoginPack);
      }
      if (Extstr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Extstr);
      }
      roompack_.WriteTo(output, _repeated_roompack_codec);
      if (playerpack_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Playerpack);
      }
      if (HeatEchoTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(HeatEchoTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requestcode != global::TEngineProto.RequestCode.RequestNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Requestcode);
      }
      if (Actioncode != global::TEngineProto.ActionCode.ActionNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Actioncode);
      }
      if (Returncode != global::TEngineProto.ReturnCode.ReturnNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Returncode);
      }
      if (loginPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoginPack);
      }
      if (Extstr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extstr);
      }
      size += roompack_.CalculateSize(_repeated_roompack_codec);
      if (playerpack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Playerpack);
      }
      if (HeatEchoTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainPack other) {
      if (other == null) {
        return;
      }
      if (other.Requestcode != global::TEngineProto.RequestCode.RequestNone) {
        Requestcode = other.Requestcode;
      }
      if (other.Actioncode != global::TEngineProto.ActionCode.ActionNone) {
        Actioncode = other.Actioncode;
      }
      if (other.Returncode != global::TEngineProto.ReturnCode.ReturnNone) {
        Returncode = other.Returncode;
      }
      if (other.loginPack_ != null) {
        if (loginPack_ == null) {
          LoginPack = new global::TEngineProto.LoginPack();
        }
        LoginPack.MergeFrom(other.LoginPack);
      }
      if (other.Extstr.Length != 0) {
        Extstr = other.Extstr;
      }
      roompack_.Add(other.roompack_);
      if (other.playerpack_ != null) {
        if (playerpack_ == null) {
          Playerpack = new global::TEngineProto.PlayerPack();
        }
        Playerpack.MergeFrom(other.Playerpack);
      }
      if (other.HeatEchoTime != 0F) {
        HeatEchoTime = other.HeatEchoTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Requestcode = (global::TEngineProto.RequestCode) input.ReadEnum();
            break;
          }
          case 16: {
            Actioncode = (global::TEngineProto.ActionCode) input.ReadEnum();
            break;
          }
          case 24: {
            Returncode = (global::TEngineProto.ReturnCode) input.ReadEnum();
            break;
          }
          case 34: {
            if (loginPack_ == null) {
              LoginPack = new global::TEngineProto.LoginPack();
            }
            input.ReadMessage(LoginPack);
            break;
          }
          case 42: {
            Extstr = input.ReadString();
            break;
          }
          case 50: {
            roompack_.AddEntriesFrom(input, _repeated_roompack_codec);
            break;
          }
          case 58: {
            if (playerpack_ == null) {
              Playerpack = new global::TEngineProto.PlayerPack();
            }
            input.ReadMessage(Playerpack);
            break;
          }
          case 69: {
            HeatEchoTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginPack : pb::IMessage<LoginPack> {
    private static readonly pb::MessageParser<LoginPack> _parser = new pb::MessageParser<LoginPack>(() => new LoginPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack(LoginPack other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginPack Clone() {
      return new LoginPack(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    /// <summary>
    ///用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginPack other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomPack : pb::IMessage<RoomPack> {
    private static readonly pb::MessageParser<RoomPack> _parser = new pb::MessageParser<RoomPack>(() => new RoomPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack(RoomPack other) : this() {
      roomname_ = other.roomname_;
      maxnum_ = other.maxnum_;
      curnum_ = other.curnum_;
      state_ = other.state_;
      gamestate_ = other.gamestate_ != null ? other.gamestate_.Clone() : null;
      roomID_ = other.roomID_;
      visable_ = other.visable_;
      usePassword_ = other.usePassword_;
      password_ = other.password_;
      playerpack_ = other.playerpack_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomPack Clone() {
      return new RoomPack(this);
    }

    /// <summary>Field number for the "roomname" field.</summary>
    public const int RoomnameFieldNumber = 1;
    private string roomname_ = "";
    /// <summary>
    ///房间名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Roomname {
      get { return roomname_; }
      set {
        roomname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxnum" field.</summary>
    public const int MaxnumFieldNumber = 2;
    private int maxnum_;
    /// <summary>
    ///房间最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxnum {
      get { return maxnum_; }
      set {
        maxnum_ = value;
      }
    }

    /// <summary>Field number for the "curnum" field.</summary>
    public const int CurnumFieldNumber = 3;
    private int curnum_;
    /// <summary>
    ///房间当前人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curnum {
      get { return curnum_; }
      set {
        curnum_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "gamestate" field.</summary>
    public const int GamestateFieldNumber = 5;
    private global::TEngineProto.GameStatePack gamestate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.GameStatePack Gamestate {
      get { return gamestate_; }
      set {
        gamestate_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 6;
    private int roomID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "visable" field.</summary>
    public const int VisableFieldNumber = 9;
    private int visable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visable {
      get { return visable_; }
      set {
        visable_ = value;
      }
    }

    /// <summary>Field number for the "usePassword" field.</summary>
    public const int UsePasswordFieldNumber = 10;
    private int usePassword_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UsePassword {
      get { return usePassword_; }
      set {
        usePassword_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 11;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerpack" field.</summary>
    public const int PlayerpackFieldNumber = 12;
    private static readonly pb::FieldCodec<global::TEngineProto.PlayerPack> _repeated_playerpack_codec
        = pb::FieldCodec.ForMessage(98, global::TEngineProto.PlayerPack.Parser);
    private readonly pbc::RepeatedField<global::TEngineProto.PlayerPack> playerpack_ = new pbc::RepeatedField<global::TEngineProto.PlayerPack>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TEngineProto.PlayerPack> Playerpack {
      get { return playerpack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Roomname != other.Roomname) return false;
      if (Maxnum != other.Maxnum) return false;
      if (Curnum != other.Curnum) return false;
      if (State != other.State) return false;
      if (!object.Equals(Gamestate, other.Gamestate)) return false;
      if (RoomID != other.RoomID) return false;
      if (Visable != other.Visable) return false;
      if (UsePassword != other.UsePassword) return false;
      if (Password != other.Password) return false;
      if(!playerpack_.Equals(other.playerpack_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Roomname.Length != 0) hash ^= Roomname.GetHashCode();
      if (Maxnum != 0) hash ^= Maxnum.GetHashCode();
      if (Curnum != 0) hash ^= Curnum.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (gamestate_ != null) hash ^= Gamestate.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (Visable != 0) hash ^= Visable.GetHashCode();
      if (UsePassword != 0) hash ^= UsePassword.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      hash ^= playerpack_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Roomname);
      }
      if (Maxnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Maxnum);
      }
      if (Curnum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Curnum);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (gamestate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Gamestate);
      }
      if (RoomID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomID);
      }
      if (Visable != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Visable);
      }
      if (UsePassword != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(UsePassword);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Password);
      }
      playerpack_.WriteTo(output, _repeated_playerpack_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Roomname);
      }
      if (Maxnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxnum);
      }
      if (Curnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curnum);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (gamestate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gamestate);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (Visable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Visable);
      }
      if (UsePassword != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsePassword);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      size += playerpack_.CalculateSize(_repeated_playerpack_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomPack other) {
      if (other == null) {
        return;
      }
      if (other.Roomname.Length != 0) {
        Roomname = other.Roomname;
      }
      if (other.Maxnum != 0) {
        Maxnum = other.Maxnum;
      }
      if (other.Curnum != 0) {
        Curnum = other.Curnum;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.gamestate_ != null) {
        if (gamestate_ == null) {
          Gamestate = new global::TEngineProto.GameStatePack();
        }
        Gamestate.MergeFrom(other.Gamestate);
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.Visable != 0) {
        Visable = other.Visable;
      }
      if (other.UsePassword != 0) {
        UsePassword = other.UsePassword;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      playerpack_.Add(other.playerpack_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Roomname = input.ReadString();
            break;
          }
          case 16: {
            Maxnum = input.ReadInt32();
            break;
          }
          case 24: {
            Curnum = input.ReadInt32();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 42: {
            if (gamestate_ == null) {
              Gamestate = new global::TEngineProto.GameStatePack();
            }
            input.ReadMessage(Gamestate);
            break;
          }
          case 48: {
            RoomID = input.ReadInt32();
            break;
          }
          case 72: {
            Visable = input.ReadInt32();
            break;
          }
          case 80: {
            UsePassword = input.ReadInt32();
            break;
          }
          case 90: {
            Password = input.ReadString();
            break;
          }
          case 98: {
            playerpack_.AddEntriesFrom(input, _repeated_playerpack_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerPack : pb::IMessage<PlayerPack> {
    private static readonly pb::MessageParser<PlayerPack> _parser = new pb::MessageParser<PlayerPack>(() => new PlayerPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack(PlayerPack other) : this() {
      playername_ = other.playername_;
      playerID_ = other.playerID_;
      hp_ = other.hp_;
      posPack_ = other.posPack_ != null ? other.posPack_.Clone() : null;
      playerJob_ = other.playerJob_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPack Clone() {
      return new PlayerPack(this);
    }

    /// <summary>Field number for the "playername" field.</summary>
    public const int PlayernameFieldNumber = 1;
    private string playername_ = "";
    /// <summary>
    ///玩家名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Playername {
      get { return playername_; }
      set {
        playername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 2;
    private string playerID_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    /// <summary>
    ///玩家血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "posPack" field.</summary>
    public const int PosPackFieldNumber = 4;
    private global::TEngineProto.PosPack posPack_;
    /// <summary>
    ///位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.PosPack PosPack {
      get { return posPack_; }
      set {
        posPack_ = value;
      }
    }

    /// <summary>Field number for the "playerJob" field.</summary>
    public const int PlayerJobFieldNumber = 5;
    private int playerJob_;
    /// <summary>
    ///玩家职业
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerJob {
      get { return playerJob_; }
      set {
        playerJob_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Playername != other.Playername) return false;
      if (PlayerID != other.PlayerID) return false;
      if (Hp != other.Hp) return false;
      if (!object.Equals(PosPack, other.PosPack)) return false;
      if (PlayerJob != other.PlayerJob) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Playername.Length != 0) hash ^= Playername.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (posPack_ != null) hash ^= PosPack.GetHashCode();
      if (PlayerJob != 0) hash ^= PlayerJob.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playername.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Playername);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerID);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (posPack_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PosPack);
      }
      if (PlayerJob != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayerJob);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Playername);
      }
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (posPack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PosPack);
      }
      if (PlayerJob != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerJob);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPack other) {
      if (other == null) {
        return;
      }
      if (other.Playername.Length != 0) {
        Playername = other.Playername;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.posPack_ != null) {
        if (posPack_ == null) {
          PosPack = new global::TEngineProto.PosPack();
        }
        PosPack.MergeFrom(other.PosPack);
      }
      if (other.PlayerJob != 0) {
        PlayerJob = other.PlayerJob;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Playername = input.ReadString();
            break;
          }
          case 18: {
            PlayerID = input.ReadString();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 34: {
            if (posPack_ == null) {
              PosPack = new global::TEngineProto.PosPack();
            }
            input.ReadMessage(PosPack);
            break;
          }
          case 40: {
            PlayerJob = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStatePack : pb::IMessage<GameStatePack> {
    private static readonly pb::MessageParser<GameStatePack> _parser = new pb::MessageParser<GameStatePack>(() => new GameStatePack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStatePack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatePack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatePack(GameStatePack other) : this() {
      state_ = other.state_;
      bossId_ = other.bossId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatePack Clone() {
      return new GameStatePack(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::TEngineProto.GAMESTATE state_ = global::TEngineProto.GAMESTATE.State1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.GAMESTATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "BossId" field.</summary>
    public const int BossIdFieldNumber = 2;
    private int bossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossId {
      get { return bossId_; }
      set {
        bossId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStatePack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStatePack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (BossId != other.BossId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::TEngineProto.GAMESTATE.State1) hash ^= State.GetHashCode();
      if (BossId != 0) hash ^= BossId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::TEngineProto.GAMESTATE.State1) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (BossId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::TEngineProto.GAMESTATE.State1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (BossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStatePack other) {
      if (other == null) {
        return;
      }
      if (other.State != global::TEngineProto.GAMESTATE.State1) {
        State = other.State;
      }
      if (other.BossId != 0) {
        BossId = other.BossId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::TEngineProto.GAMESTATE) input.ReadEnum();
            break;
          }
          case 16: {
            BossId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardData : pb::IMessage<CardData> {
    private static readonly pb::MessageParser<CardData> _parser = new pb::MessageParser<CardData>(() => new CardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData(CardData other) : this() {
      cardInt_ = other.cardInt_;
      cardValue_ = other.cardValue_;
      cardType_ = other.cardType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData Clone() {
      return new CardData(this);
    }

    /// <summary>Field number for the "cardInt" field.</summary>
    public const int CardIntFieldNumber = 1;
    private int cardInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardInt {
      get { return cardInt_; }
      set {
        cardInt_ = value;
      }
    }

    /// <summary>Field number for the "cardValue" field.</summary>
    public const int CardValueFieldNumber = 2;
    private int cardValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardValue {
      get { return cardValue_; }
      set {
        cardValue_ = value;
      }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private global::TEngineProto.CardType cardType_ = global::TEngineProto.CardType.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TEngineProto.CardType CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardInt != other.CardInt) return false;
      if (CardValue != other.CardValue) return false;
      if (CardType != other.CardType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardInt != 0) hash ^= CardInt.GetHashCode();
      if (CardValue != 0) hash ^= CardValue.GetHashCode();
      if (CardType != global::TEngineProto.CardType.None) hash ^= CardType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardInt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardInt);
      }
      if (CardValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardValue);
      }
      if (CardType != global::TEngineProto.CardType.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CardType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardInt);
      }
      if (CardValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardValue);
      }
      if (CardType != global::TEngineProto.CardType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardData other) {
      if (other == null) {
        return;
      }
      if (other.CardInt != 0) {
        CardInt = other.CardInt;
      }
      if (other.CardValue != 0) {
        CardValue = other.CardValue;
      }
      if (other.CardType != global::TEngineProto.CardType.None) {
        CardType = other.CardType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardInt = input.ReadInt32();
            break;
          }
          case 16: {
            CardValue = input.ReadInt32();
            break;
          }
          case 24: {
            CardType = (global::TEngineProto.CardType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PosPack : pb::IMessage<PosPack> {
    private static readonly pb::MessageParser<PosPack> _parser = new pb::MessageParser<PosPack>(() => new PosPack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PosPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TEngineProto.TEngineProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosPack(PosPack other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      rotaX_ = other.rotaX_;
      rotaY_ = other.rotaY_;
      rotaZ_ = other.rotaZ_;
      animation_ = other.animation_;
      dirr_ = other.dirr_;
      moveX_ = other.moveX_;
      moveY_ = other.moveY_;
      moveZ_ = other.moveZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PosPack Clone() {
      return new PosPack(this);
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "RotaX" field.</summary>
    public const int RotaXFieldNumber = 4;
    private float rotaX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaX {
      get { return rotaX_; }
      set {
        rotaX_ = value;
      }
    }

    /// <summary>Field number for the "RotaY" field.</summary>
    public const int RotaYFieldNumber = 5;
    private float rotaY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaY {
      get { return rotaY_; }
      set {
        rotaY_ = value;
      }
    }

    /// <summary>Field number for the "RotaZ" field.</summary>
    public const int RotaZFieldNumber = 6;
    private float rotaZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotaZ {
      get { return rotaZ_; }
      set {
        rotaZ_ = value;
      }
    }

    /// <summary>Field number for the "Animation" field.</summary>
    public const int AnimationFieldNumber = 8;
    private int animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "Dirr" field.</summary>
    public const int DirrFieldNumber = 9;
    private int dirr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dirr {
      get { return dirr_; }
      set {
        dirr_ = value;
      }
    }

    /// <summary>Field number for the "MoveX" field.</summary>
    public const int MoveXFieldNumber = 10;
    private float moveX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveX {
      get { return moveX_; }
      set {
        moveX_ = value;
      }
    }

    /// <summary>Field number for the "MoveY" field.</summary>
    public const int MoveYFieldNumber = 11;
    private float moveY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveY {
      get { return moveY_; }
      set {
        moveY_ = value;
      }
    }

    /// <summary>Field number for the "MoveZ" field.</summary>
    public const int MoveZFieldNumber = 12;
    private float moveZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveZ {
      get { return moveZ_; }
      set {
        moveZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PosPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PosPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaX, other.RotaX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaY, other.RotaY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotaZ, other.RotaZ)) return false;
      if (Animation != other.Animation) return false;
      if (Dirr != other.Dirr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveX, other.MoveX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveY, other.MoveY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MoveZ, other.MoveZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (RotaX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaX);
      if (RotaY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaY);
      if (RotaZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotaZ);
      if (Animation != 0) hash ^= Animation.GetHashCode();
      if (Dirr != 0) hash ^= Dirr.GetHashCode();
      if (MoveX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveX);
      if (MoveY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveY);
      if (MoveZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MoveZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
      if (RotaX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RotaX);
      }
      if (RotaY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotaY);
      }
      if (RotaZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotaZ);
      }
      if (Animation != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Animation);
      }
      if (Dirr != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Dirr);
      }
      if (MoveX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MoveX);
      }
      if (MoveY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(MoveY);
      }
      if (MoveZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(MoveZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (RotaX != 0F) {
        size += 1 + 4;
      }
      if (RotaY != 0F) {
        size += 1 + 4;
      }
      if (RotaZ != 0F) {
        size += 1 + 4;
      }
      if (Animation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Animation);
      }
      if (Dirr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dirr);
      }
      if (MoveX != 0F) {
        size += 1 + 4;
      }
      if (MoveY != 0F) {
        size += 1 + 4;
      }
      if (MoveZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PosPack other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.RotaX != 0F) {
        RotaX = other.RotaX;
      }
      if (other.RotaY != 0F) {
        RotaY = other.RotaY;
      }
      if (other.RotaZ != 0F) {
        RotaZ = other.RotaZ;
      }
      if (other.Animation != 0) {
        Animation = other.Animation;
      }
      if (other.Dirr != 0) {
        Dirr = other.Dirr;
      }
      if (other.MoveX != 0F) {
        MoveX = other.MoveX;
      }
      if (other.MoveY != 0F) {
        MoveY = other.MoveY;
      }
      if (other.MoveZ != 0F) {
        MoveZ = other.MoveZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
          case 37: {
            RotaX = input.ReadFloat();
            break;
          }
          case 45: {
            RotaY = input.ReadFloat();
            break;
          }
          case 53: {
            RotaZ = input.ReadFloat();
            break;
          }
          case 64: {
            Animation = input.ReadInt32();
            break;
          }
          case 72: {
            Dirr = input.ReadInt32();
            break;
          }
          case 85: {
            MoveX = input.ReadFloat();
            break;
          }
          case 93: {
            MoveY = input.ReadFloat();
            break;
          }
          case 101: {
            MoveZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
